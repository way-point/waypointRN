/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/post/postCreate': {
    post: {
      parameters: {
        body: {
          body: definitions['PostSchema'];
        };
        header: {
          /** JWT Token given by Signed in user */
          authorization_bearer: unknown;
        };
      };
      responses: {
        200: {
          schema: definitions['PostSchema'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/post/postFind': {
    get: {
      parameters: {
        query: {
          lat: unknown;
          lng: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE posts as a list */
        200: {
          schema: definitions['NestedPosts'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/ifUsernameExist': {
    get: {
      parameters: {
        query: {
          username: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['IfUserExistSchema'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/uidFind': {
    get: {
      parameters: {
        query: {
          uid: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['User'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/userCreate': {
    post: {
      parameters: {
        body: {
          /** Creates a user from a username */
          body: definitions['UsernameAndProfileUriSchema'];
        };
        header: {
          /** JWT Token given by Signed in user */
          authorization_bearer: unknown;
        };
      };
      responses: {
        200: {
          schema: definitions['User'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/userFind': {
    get: {
      parameters: {
        query: {
          username: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['NestedUsers'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
}

export interface definitions {
  GenericErrorSchema: {
    errors?: string[];
  };
  IfUserExistSchema: {
    ifUserExist?: boolean;
  };
  NestedPosts: {
    posts?: {
      attachment?: {
        /** @enum {string} */
        attachment_type: 'video' | 'photo';
        duration?: number;
        url: string;
      };
      /** Format: date-time */
      date_created?: string;
      event_details?: {
        address: string;
        coordinate: {
          geoPoint?: unknown;
          latitude: number;
          longitude: number;
        };
        time_of_event: {
          /** Format: date */
          end_time: string;
          /** Format: date-time */
          start_time: string;
        };
      };
      host_id?: unknown;
      id?: unknown;
    }[];
  };
  NestedUsers: {
    users?: {
      /** Format: date-time */
      date_created?: string;
      posts?: unknown[];
      profile_uri?: string;
      uid: string;
      username: string;
    }[];
  };
  PostSchema: {
    attachment?: {
      /** @enum {string} */
      attachment_type: 'video' | 'photo';
      duration?: number;
      url: string;
    };
    /** Format: date-time */
    date_created?: string;
    event_details?: {
      address: string;
      coordinate: {
        geoPoint?: unknown;
        latitude: number;
        longitude: number;
      };
      time_of_event: {
        /** Format: date */
        end_time: string;
        /** Format: date-time */
        start_time: string;
      };
    };
    host_id?: unknown;
    id?: unknown;
  };
  UidSchema: {
    uid: string;
  };
  User: {
    /** Format: date-time */
    date_created?: string;
    posts?: unknown[];
    profile_uri?: string;
    uid: string;
    username: string;
  };
  UsernameAndProfileUriSchema: {
    profile_uri?: string;
    username: string;
  };
  UsernameSchema: {
    username: string;
  };
}

export interface operations {}

export interface external {}
