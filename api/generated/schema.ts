/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/user/ifUsernameExist': {
    get: {
      parameters: {
        query: {
          username: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['IfUserExistSchema'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/uidFind': {
    get: {
      parameters: {
        query: {
          uid: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['User'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/userCreate': {
    post: {
      parameters: {
        body: {
          /** Creates a user from a username */
          body: definitions['UsernameAndProfileUriSchema'];
        };
        header: {
          /** JWT Token given by Signed in user */
          authorization_bearer: unknown;
        };
      };
      responses: {
        200: {
          schema: definitions['User'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
  '/api/user/userFind': {
    get: {
      parameters: {
        query: {
          username: unknown;
        };
      };
      responses: {
        /** Returns the first FIVE users as a list */
        200: {
          schema: definitions['NestedUsers'];
        };
        400: {
          schema: definitions['GenericErrorSchema'];
        };
        500: {
          schema: definitions['GenericErrorSchema'];
        };
      };
    };
  };
}

export interface definitions {
  GenericErrorSchema: {
    errors?: string[];
  };
  IfUserExistSchema: {
    ifUserExist?: boolean;
  };
  NestedUsers: {
    users?: {
      /** Format: date-time */
      date_created?: string;
      profile_uri?: string;
      uid: string;
      username: string;
    }[];
  };
  UidSchema: {
    uid: string;
  };
  User: {
    /** Format: date-time */
    date_created?: string;
    profile_uri?: string;
    uid: string;
    username: string;
  };
  UsernameAndProfileUriSchema: {
    profile_uri?: string;
    username: string;
  };
  UsernameSchema: {
    username: string;
  };
}

export interface operations {}

export interface external {}
